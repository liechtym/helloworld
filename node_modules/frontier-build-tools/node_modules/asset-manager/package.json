{
  "name": "asset-manager",
  "description": "Asset manager built on top of connect-asset for managing multiple asset folders.",
  "version": "0.4.0",
  "author": {
    "name": "FamilySearch Web Developers"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fs-webdev/asset-manager.git"
  },
  "dependencies": {
    "async": "0.1.x",
    "glob": "3.1.12",
    "rimraf": "1.x",
    "uglify-js": "1.2.x",
    "less": "1.3.x",
    "coffee-script": "1.4.x",
    "stylus": "0.42.3",
    "debug": "~0.7.2"
  },
  "devDependencies": {
    "mocha": "1.4.x",
    "chai": "1.6.x",
    "sinon": "1.4.x"
  },
  "scripts": {
    "test": "mocha test/*-test.js -R spec"
  },
  "main": "lib/asset-manager.js",
  "engines": {
    "node": ">= 0.8.3"
  },
  "contributors": [
    {
      "name": "Tim Shadel",
      "email": "tim.shadel@familysearch.org"
    },
    {
      "name": "Stephen Lynn",
      "email": "s.lynn@familysearch.org"
    }
  ],
  "readme": "# asset-manager\n\nStatic asset manager that allows you to declare multiple asset folders that will be searched when\nresolving static assets in your app.  This library also provides the ability to precompile all of the static assets\ninto their production form (e.g., minified content with hashed filenames).  The precompile step generates a manifest \nfile that will be used in production to resolve requested assets.  It also generates a clientManifest that can be in the\nbrowser to dynamically load static assets (e.g., people using the Inject dependency management library - https://github.com/linkedin/inject)\n\n[![build status](https://secure.travis-ci.org/fs-webdev/asset-manager.png)](http://travis-ci.org/fs-webdev/asset-manager)\n\n## How?\n\nFirst, install it in your project's directory:\n\n    npm install asset-manager\n\nThen add this line to your app's configuration:\n\n    var assetManager = require('asset-manager')\n\nFinally, initialize the manager with the paths it should search for static assets:\n\n    assetManager.start({\n        paths: [\"assets\", \n                \"../global/assets\", \n                \"vendor\"],\n        inProd: (process.env.NODE_ENV === 'production')\n      }, callback);\n\n### Markup functions\n\n`asset-manager` provides three global functions named `img`, `js`, and `css`. Use them in your views to resolve\nstatic assets into the markup need to resolve these assets in your page. For instance, in an [EJS template]:\n\n    <%- css('normalize') %>\n    <%- js('jquery') %>\n    <%- img('icon') %>\n\n### Supported CSS Precompilers\n`asset-manager` has built in support for the following CSS preprocessors:\n* Less\n* Stylus\n\n### Express Middleware\n\nIf you want to have your app serve the static assets as well (a likely case at dev time), you can use the provided\nExpress middle ware to do this:\n\n    app.use(assetManager.expressMiddleware);\n\n### Express Production Middleware\n\nIf you want to have your app serve the static assets in production as well, you can use the provided static\nExpress middle ware to do this (the final parameter is whether or not the assets are gzip encoded):\n\n    app.use(assetManager.staticAssetMiddleware(express.static(__dirname + '/builtAssets', { maxAge: 31536000000 }), true));\n\n### Precompile assets\n\nYou can precompile your assets into their production form as follows (CDN_BASE_URL should be set to whatever url you want\nprepended to your static asset paths):\n\n    assetManager.precompile({\n        paths: [\"assets\", \n                \"../global/assets\", \n                \"vendor\")],\n        servePath: CDN_BASE_URL,\n        gzip: true\n      }, callback);\n\n## Options\n\nIf you like, you can pass any of these options to the `start` or `precompile` functions:\n\n* `paths` (required): An array of paths that should be used to find static assets.\n* `inProd` (defaults to `false`): Indicates whether the application is running in production mode or not. \n* `servePath` (defaults to ''): The path you want to append to all asset urls.  Useful for pointing at an external CDN location.\n* `builtAssets` (defaults to 'builtAssets'): The folder you want precompiled assets to be placed in.\n* `context` (defaults to global): The object you want to hang the 'css', 'js', and 'img' functions on for resolving static assets.\n* `gzip` (defaults to false): Whether or not to gzip the contents of 'css' and 'js' files.\n* `scanDir` (defaults to ''): Include a base path you want asset-manager to scan for modules that contain `asset-manifest.json` files indicating the module contains static assets that should be available for use.\n",
  "readmeFilename": "README.mdown",
  "bugs": {
    "url": "https://github.com/fs-webdev/asset-manager/issues"
  },
  "homepage": "https://github.com/fs-webdev/asset-manager",
  "_id": "asset-manager@0.4.0",
  "dist": {
    "shasum": "2952ce1bf0af350223e1b7f8976f6794487344cf"
  },
  "_resolved": "git+https://github.com/fs-webdev/asset-manager.git#5d7d904b9bcfcb901143e1961b3d2a4300c62830",
  "_from": "asset-manager@git+https://github.com/fs-webdev/asset-manager.git"
}
